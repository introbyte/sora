// noise.h

#ifndef NOISE_H
#define NOISE_H

// functions

// output range: [0.0f, 1.0f]
function f32 noise_white(f32);
function f32 noise_white(vec2_t);
function f32 noise_white(vec3_t);

function f32 noise_simplex(f32); // output range: [-0.5f, 0.5f]
function f32 noise_simplex(f32, f32); // output range: [-0.707f, 0.707f]
function f32 noise_simplex(vec3_t); // output range: [-0.866f, 0.866f]

function f32 noise_fbm(f32, u8, f32, f32); // output range: [use function]
function f32 noise_fbm(vec2_t, u8, f32, f32);
function f32 noise_fbm(vec3_t, u8, f32, f32);

function vec2_t noise_fbm_range(u8, u8, f32, f32);

// helper functions
inlnfunc f32 _noise_fade(f32);
inlnfunc f32 _noise_grad(i32, f32);
inlnfunc f32 _noise_grad(i32, f32, f32);
inlnfunc f32 _noise_grad(i32, f32, f32, f32);

// permutation table for perlin noise
global u8 perm[512] = {
        0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
        0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
        0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
        0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
        0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
        0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
        0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
        0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
        0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
        0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
        0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
        0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
        0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
        0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
        0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
        0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,

        0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
        0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
        0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
        0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
        0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
        0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
        0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
        0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
        0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
        0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
        0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
        0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
        0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
        0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
        0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
        0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,
};

// implementation

function f32
noise_white(f32 p) {
    random_seed((u32)p);
    f32 value = random_f32();
    return value;
}

function f32
noise_white(vec2_t p) {
    u32 seed = (u32)p.y << 16 | (u32)p.x;
    random_seed(seed);
    f32 value = random_f32();
    return value;
}

function f32
noise_white(vec3_t p) {
    u32 seed = ((u32)p.z << 20) ^ ((u32)p.y << 10) ^ (u32)p.x;
	random_seed(seed);
	f32 value = random_f32();
	return value;
}


function f32
noise_simplex(f32 x) {
    
    i32 xi0 = floorf(x);

    f32 xf0 = x - xi0;
    f32 xf1 = xf0 - 1.0f;

    i32 xi = xi0 & 0xFF;

    f32 u = _noise_fade(xf0);

    i32 h0 = perm[xi + 0];
    i32 h1 = perm[xi + 1];

    return lerp(_noise_grad(h0, xf0), _noise_grad(h1, xf1), u);
}

function f32
noise_simplex(f32 x, f32 y) {

    i32 xi0 = (i32)x;
    i32 yi0 = (i32)y;

    f32 xf0 = x - xi0;
    f32 yf0 = y - yi0;
    f32 xf1 = xf0 - 1.0f;
    f32 yf1 = yf0 - 1.0f;

    i32 xi = xi0 & 0xFF;
    i32 yi = yi0 & 0xFF;

    f32 u = _noise_fade(xf0);
    f32 v = _noise_fade(yf0);

    i32 h00 = (i32)perm[perm[xi + 0] + yi + 0];
    i32 h01 = (i32)perm[perm[xi + 0] + yi + 1];
    i32 h10 = (i32)perm[perm[xi + 1] + yi + 0];
    i32 h11 = (i32)perm[perm[xi + 1] + yi + 1];

    f32 x1 = lerp(_noise_grad(h00, xf0, yf0), _noise_grad(h10, xf1, yf0), u);
    f32 x2 = lerp(_noise_grad(h01, xf0, yf1), _noise_grad(h11, xf1, yf1), u);

    return lerp(x1, x2, v);
}

function f32
noise_simplex(f32 x, f32 y, f32 z) {

    i32 xi0 = (i32)floorf(x);
    i32 yi0 = (i32)floorf(y);
    i32 zi0 = (i32)floorf(z);

    f32 xf0 = x - f32(xi0);
    f32 yf0 = y - f32(yi0);
    f32 zf0 = z - f32(zi0);
    f32 xf1 = xf0 - f32(1.0);
    f32 yf1 = yf0 - f32(1.0);
    f32 zf1 = zf0 - f32(1.0);

    i32 xi = xi0 & 0xFF;
    i32 yi = yi0 & 0xFF;
    i32 zi = zi0 & 0xFF;

    f32 u = _noise_fade(xf0);
    f32 v = _noise_fade(yf0);
    f32 w = _noise_fade(zf0);

    i32 h000 = perm[perm[perm[xi + 0] + yi + 0] + zi + 0];
    i32 h001 = perm[perm[perm[xi + 0] + yi + 0] + zi + 1];
    i32 h010 = perm[perm[perm[xi + 0] + yi + 1] + zi + 0];
    i32 h011 = perm[perm[perm[xi + 0] + yi + 1] + zi + 1];
    i32 h100 = perm[perm[perm[xi + 1] + yi + 0] + zi + 0];
    i32 h101 = perm[perm[perm[xi + 1] + yi + 0] + zi + 1];
    i32 h110 = perm[perm[perm[xi + 1] + yi + 1] + zi + 0];
    i32 h111 = perm[perm[perm[xi + 1] + yi + 1] + zi + 1];

    f32 x11 = lerp(_noise_grad(h000, xf0, yf0, zf0), _noise_grad(h100, xf1, yf0, zf0), u);
    f32 x12 = lerp(_noise_grad(h010, xf0, yf1, zf0), _noise_grad(h110, xf1, yf1, zf0), u);
    f32 x21 = lerp(_noise_grad(h001, xf0, yf0, zf1), _noise_grad(h101, xf1, yf0, zf1), u);
    f32 x22 = lerp(_noise_grad(h011, xf0, yf1, zf1), _noise_grad(h111, xf1, yf1, zf1), u);

    f32 y1 = lerp(x11, x12, v);
    f32 y2 = lerp(x21, x22, v);

    return lerp(y1, y2, w);
}


function f32
noise_fbm(f32 p, u8 octaves = 4, f32 lacunarity = 2.0f, f32 gain = 0.5f) {
    f32 sum = 0.0f;
    f32 freq = 1.0f;
    f32 amp = 0.5f;

    for (u8 i = 0; i < octaves; i++) {
        f32 n = noise_simplex(p * freq);
        sum += n * amp;
        freq *= lacunarity;
        amp *= gain;
    }

    return sum;
}

function f32
noise_fbm(vec2_t p, u8 octaves = 4, f32 lacunarity = 2.0f, f32 gain = 0.5f) {
    f32 sum = 0.0f;
    f32 freq = 1.0f;
    f32 amp = 0.5f;

    for (u8 i = 0; i < octaves; i++) {
        f32 n = noise_simplex(p.x * freq, p.y * freq);
        sum += n * amp;
        freq *= lacunarity;
        amp *= gain;
    }

    return sum;
}

function f32
noise_fbm(vec3_t p, u8 octaves = 4, f32 lacunarity = 2.0f, f32 gain = 0.5f) {

    f32 sum = 0.0f;
    f32 freq = 1.0f;
    f32 amp = 0.5f;

    for (u8 i = 0; i < octaves; i++) {
        f32 n = noise_simplex(p.x * freq, p.y * freq, p.z * freq);
        sum += n * amp;
        freq *= lacunarity;
        amp *= gain;
    }

    return sum;
}

function vec2_t
noise_fbm_range(u8 dimensions, u8 octaves = 4, f32 lacunarity = 2.0f, f32 gain = 0.5f) {

    const f32 dim_ranges[] = { 0.5f, 0.70710678118f, 0.86602540378f };
    
    f32 lower = 0.0f;
    f32 upper = 0.0f;

    if (gain == 1.0f) {
        lower = -dim_ranges[dimensions - 1] * 0.5f * octaves;
        upper = dim_ranges[dimensions - 1] * 0.5f * octaves;
    } else  {
        lower = -dim_ranges[dimensions - 1] * 0.5f * ((1.0f - powf(gain, (f32)octaves)) / (1.0f - gain));
        upper = dim_ranges[dimensions - 1] * 0.5f * ((1.0f - powf(gain, (f32)octaves)) / (1.0f - gain));
    }

    return vec2(lower, upper);
}


// helper functions

inlnfunc f32
_noise_fade(f32 t) { 
    return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
}

inlnfunc f32
_noise_grad(i32 hash, f32 x) {
    return (hash & 0x1) ? x : -x;
}

inlnfunc f32
_noise_grad(i32 hash, f32 x, f32 y) {
    switch (hash & 0x7) {
        case 0x0: return  x + y;
        case 0x1: return  x;
        case 0x2: return  x - y;
        case 0x3: return -y;
        case 0x4: return -x - y;
        case 0x5: return -x;
        case 0x6: return -x + y;
        case 0x7: return  y;
        default:  return  0.0f;
    }
}

inlnfunc f32
_noise_grad(i32 hash, f32 x, f32 y, f32 z) {
    switch (hash & 0xF) {
        case 0x0: return  x + y;
        case 0x1: return -x + y;
        case 0x2: return  x - y;
        case 0x3: return -x - y;
        case 0x4: return  x + z;
        case 0x5: return -x + z;
        case 0x6: return  x - z;
        case 0x7: return -x - z;
        case 0x8: return  y + z;
        case 0x9: return -y + z;
        case 0xA: return  y - z;
        case 0xB: return -y - z;
        case 0xC: return  y + x;
        case 0xD: return -y + z;
        case 0xE: return  y - x;
        case 0xF: return -y - z;
        default:  return  0.0f;
    }
}


#endif // NOISE_H